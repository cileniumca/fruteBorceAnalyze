using AnalyzeDomains.Domain.Interfaces.Analyzers;
using AnalyzeDomains.Domain.Interfaces.Services;
using AnalyzeDomains.Infrastructure.Services;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Xunit;

namespace AnalyzeDomains.Tests.Integration
{
    /// <summary>
    /// Integration tests for WordPress plugin vulnerability analysis system.
    /// These tests validate the complete vulnerability detection and educational exploit testing pipeline.
    /// </summary>
    public class WordPressVulnerabilityAnalysisTests
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<WordPressVulnerabilityAnalysisTests> _logger;

        public WordPressVulnerabilityAnalysisTests()
        {
            var services = new ServiceCollection();
            
            // Add logging
            services.AddLogging(builder => builder.AddConsole());
            
            // Add required services (mock implementations for testing)
            services.AddSingleton<ISocksService, MockSocksService>();
            services.AddSingleton<IDatabaseService, MockDatabaseService>();
            services.AddTransient<IWordPressPluginVulnerabilityAnalyzer, WordPressPluginVulnerabilityAnalyzer>();
            services.AddTransient<AdvancedWordPressExploitAnalyzer>();
            services.AddTransient<WordPressVulnerabilityResearchService>();
            
            _serviceProvider = services.BuildServiceProvider();
            _logger = _serviceProvider.GetRequiredService<ILogger<WordPressVulnerabilityAnalysisTests>>();
        }

        [Fact]
        public async Task AnalyzeVulnerabilitiesAsync_ReturnsExpectedVulnerabilities()
        {
            // Arrange
            var analyzer = _serviceProvider.GetRequiredService<IWordPressPluginVulnerabilityAnalyzer>();
            var testUrl = "https://vulnerable-wordpress-site.com";

            // Act
            var vulnerabilities = await analyzer.AnalyzeVulnerabilitiesAsync(testUrl);

            // Assert
            Assert.NotNull(vulnerabilities);
            _logger.LogInformation($"Found {vulnerabilities.Count} vulnerabilities for {testUrl}");
        }

        [Fact]
        public async Task TestReflexGalleryUploadAsync_ValidatesImplementation()
        {
            // Arrange
            var analyzer = _serviceProvider.GetRequiredService<IWordPressPluginVulnerabilityAnalyzer>();
            var testUrl = "https://test-site-with-reflex-gallery.com";

            // Act
            var result = await analyzer.TestReflexGalleryUploadAsync(testUrl, "127.0.0.1", 4444);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Reflex Gallery Arbitrary File Upload", result.VulnerabilityType);
            Assert.Contains("Educational", result.Method);
            _logger.LogInformation($"Reflex Gallery test result: {result.Details}");
        }

        [Fact]
        public async Task TestGwolleGuestbookRfiAsync_ValidatesImplementation()
        {
            // Arrange
            var analyzer = _serviceProvider.GetRequiredService<IWordPressPluginVulnerabilityAnalyzer>();
            var testUrl = "https://test-site-with-gwolle-guestbook.com";

            // Act
            var result = await analyzer.TestGwolleGuestbookRfiAsync(testUrl, "127.0.0.1", 4444);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Gwolle Guestbook RFI", result.VulnerabilityType);
            Assert.Contains("Educational", result.Method);
            _logger.LogInformation($"Gwolle Guestbook test result: {result.Details}");
        }

        [Fact]
        public async Task TestMailMastaLfiAsync_ValidatesImplementation()
        {
            // Arrange
            var analyzer = _serviceProvider.GetRequiredService<IWordPressPluginVulnerabilityAnalyzer>();
            var testUrl = "https://test-site-with-mail-masta.com";

            // Act
            var result = await analyzer.TestMailMastaLfiAsync(testUrl, "127.0.0.1", 4444);

            // Assert
            Assert.NotNull(result);
            Assert.Equal("Mail Masta LFI + Log Poisoning", result.VulnerabilityType);
            Assert.Contains("Educational", result.Method);
            _logger.LogInformation($"Mail Masta test result: {result.Details}");
        }

        [Fact]
        public async Task AdvancedWordPressExploitAnalyzer_PerformsComprehensiveAnalysis()
        {
            // Arrange
            var advancedAnalyzer = _serviceProvider.GetRequiredService<AdvancedWordPressExploitAnalyzer>();
            var testUrl = "https://comprehensive-test-site.com";

            // Act
            var vulnerabilities = await advancedAnalyzer.AnalyzeVulnerabilitiesAsync(testUrl);

            // Assert
            Assert.NotNull(vulnerabilities);
            _logger.LogInformation($"Advanced analysis found {vulnerabilities.Count} vulnerabilities");
            
            // Validate exploit patterns are loaded
            var reflexTest = await advancedAnalyzer.TestReflexGalleryUploadAsync(testUrl, "127.0.0.1", 4444);
            var gwolleTest = await advancedAnalyzer.TestGwolleGuestbookRfiAsync(testUrl, "127.0.0.1", 4444);
            var mailMastaTest = await advancedAnalyzer.TestMailMastaLfiAsync(testUrl, "127.0.0.1", 4444);

            Assert.NotNull(reflexTest);
            Assert.NotNull(gwolleTest);
            Assert.NotNull(mailMastaTest);
        }

        [Fact]
        public async Task WordPressVulnerabilityResearchService_PerformsComprehensiveAnalysis()
        {
            // Arrange
            var researchService = _serviceProvider.GetRequiredService<WordPressVulnerabilityResearchService>();
            var testUrl = "https://research-target-site.com";
            var siteId = 12345;

            // Act
            var analysisResult = await researchService.PerformComprehensiveAnalysisAsync(testUrl, siteId);

            // Assert
            Assert.NotNull(analysisResult);
            Assert.Equal(testUrl, analysisResult.TargetUrl);
            Assert.Equal(siteId, analysisResult.SiteId);
            Assert.True(analysisResult.Success);
            Assert.NotNull(analysisResult.SessionId);
            
            _logger.LogInformation($"Comprehensive analysis completed in {analysisResult.Duration:mm\\:ss}");
            _logger.LogInformation($"Found {analysisResult.TotalVulnerabilityCount} total vulnerabilities");
            _logger.LogInformation($"Successful exploits: {analysisResult.SuccessfulExploitCount}");
        }

        [Fact]
        public void VulnerabilityAnalysisSession_TracksSessionCorrectly()
        {
            // Arrange
            var session = new VulnerabilityAnalysisSession
            {
                SessionId = "test-session-123",
                TargetUrl = "https://test-site.com",
                SiteId = 456,
                StartTime = DateTime.UtcNow.AddMinutes(-5),
                Phase = "Testing"
            };

            // Act & Assert
            Assert.Equal("test-session-123", session.SessionId);
            Assert.Equal("https://test-site.com", session.TargetUrl);
            Assert.Equal(456, session.SiteId);
            Assert.Equal("Testing", session.Phase);
            Assert.True(session.ElapsedTime.TotalMinutes >= 5);
        }
    }

    // Mock implementations for testing
    public class MockSocksService : ISocksService
    {
        public Task<HttpClient> GetHttpWithBalancedSocksConnection()
        {
            var client = new HttpClient();
            client.Timeout = TimeSpan.FromSeconds(30);
            return Task.FromResult(client);
        }

        // Implement other required methods...
    }

    public class MockDatabaseService : IDatabaseService
    {
        public Task InsertSiteVulnerabilitiesAsync(int siteId, List<PluginVulnerability> vulnerabilities, CancellationToken cancellationToken = default)
        {
            // Mock implementation
            return Task.CompletedTask;
        }

        public Task InsertVulnerabilityExploitResultsAsync(int siteId, List<VulnerabilityExploitResult> exploitResults, CancellationToken cancellationToken = default)
        {
            // Mock implementation
            return Task.CompletedTask;
        }

        // Implement other required IDatabaseService methods as needed for testing...
    }
}
